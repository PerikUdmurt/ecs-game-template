//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeSystemMatcher {

    static Entitas.IMatcher<NodeSystemEntity> _matcherSkipTimerNode;

    public static Entitas.IMatcher<NodeSystemEntity> SkipTimerNode {
        get {
            if (_matcherSkipTimerNode == null) {
                var matcher = (Entitas.Matcher<NodeSystemEntity>)Entitas.Matcher<NodeSystemEntity>.AllOf(NodeSystemComponentsLookup.SkipTimerNode);
                matcher.componentNames = NodeSystemComponentsLookup.componentNames;
                _matcherSkipTimerNode = matcher;
            }

            return _matcherSkipTimerNode;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeSystemEntity {

    public NodeBasedSystem.Nodes.SkipTimerNodeComponent skipTimerNode { get { return (NodeBasedSystem.Nodes.SkipTimerNodeComponent)GetComponent(NodeSystemComponentsLookup.SkipTimerNode); } }
    public float SkipTimerNode { get { return skipTimerNode.Value; } }
    public bool hasSkipTimerNode { get { return HasComponent(NodeSystemComponentsLookup.SkipTimerNode); } }

    public NodeSystemEntity AddSkipTimerNode(float newValue) {
        var index = NodeSystemComponentsLookup.SkipTimerNode;
        var component = (NodeBasedSystem.Nodes.SkipTimerNodeComponent)CreateComponent(index, typeof(NodeBasedSystem.Nodes.SkipTimerNodeComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public NodeSystemEntity ReplaceSkipTimerNode(float newValue) {
        var index = NodeSystemComponentsLookup.SkipTimerNode;
        var component = (NodeBasedSystem.Nodes.SkipTimerNodeComponent)CreateComponent(index, typeof(NodeBasedSystem.Nodes.SkipTimerNodeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public NodeSystemEntity RemoveSkipTimerNode() {
        RemoveComponent(NodeSystemComponentsLookup.SkipTimerNode);
        return this;
    }
}

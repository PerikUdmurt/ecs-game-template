//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeSystemMatcher {

    static Entitas.IMatcher<NodeSystemEntity> _matcherNodeId;

    public static Entitas.IMatcher<NodeSystemEntity> NodeId {
        get {
            if (_matcherNodeId == null) {
                var matcher = (Entitas.Matcher<NodeSystemEntity>)Entitas.Matcher<NodeSystemEntity>.AllOf(NodeSystemComponentsLookup.NodeId);
                matcher.componentNames = NodeSystemComponentsLookup.componentNames;
                _matcherNodeId = matcher;
            }

            return _matcherNodeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeSystemEntity {

    public NodeBasedSystem.Nodes.NodeId nodeId { get { return (NodeBasedSystem.Nodes.NodeId)GetComponent(NodeSystemComponentsLookup.NodeId); } }
    public string NodeId { get { return nodeId.Value; } }
    public bool hasNodeId { get { return HasComponent(NodeSystemComponentsLookup.NodeId); } }

    public NodeSystemEntity AddNodeId(string newValue) {
        var index = NodeSystemComponentsLookup.NodeId;
        var component = (NodeBasedSystem.Nodes.NodeId)CreateComponent(index, typeof(NodeBasedSystem.Nodes.NodeId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public NodeSystemEntity ReplaceNodeId(string newValue) {
        var index = NodeSystemComponentsLookup.NodeId;
        var component = (NodeBasedSystem.Nodes.NodeId)CreateComponent(index, typeof(NodeBasedSystem.Nodes.NodeId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public NodeSystemEntity RemoveNodeId() {
        RemoveComponent(NodeSystemComponentsLookup.NodeId);
        return this;
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeSystemMatcher {

    static Entitas.IMatcher<NodeSystemEntity> _matcherNodeEvent;

    public static Entitas.IMatcher<NodeSystemEntity> NodeEvent {
        get {
            if (_matcherNodeEvent == null) {
                var matcher = (Entitas.Matcher<NodeSystemEntity>)Entitas.Matcher<NodeSystemEntity>.AllOf(NodeSystemComponentsLookup.NodeEvent);
                matcher.componentNames = NodeSystemComponentsLookup.componentNames;
                _matcherNodeEvent = matcher;
            }

            return _matcherNodeEvent;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeSystemEntity {

    public Code.NodeBasedSystem.NodeEventComponent nodeEvent { get { return (Code.NodeBasedSystem.NodeEventComponent)GetComponent(NodeSystemComponentsLookup.NodeEvent); } }
    public string NodeEvent { get { return nodeEvent.Value; } }
    public bool hasNodeEvent { get { return HasComponent(NodeSystemComponentsLookup.NodeEvent); } }

    public NodeSystemEntity AddNodeEvent(string newValue) {
        var index = NodeSystemComponentsLookup.NodeEvent;
        var component = (Code.NodeBasedSystem.NodeEventComponent)CreateComponent(index, typeof(Code.NodeBasedSystem.NodeEventComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public NodeSystemEntity ReplaceNodeEvent(string newValue) {
        var index = NodeSystemComponentsLookup.NodeEvent;
        var component = (Code.NodeBasedSystem.NodeEventComponent)CreateComponent(index, typeof(Code.NodeBasedSystem.NodeEventComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public NodeSystemEntity RemoveNodeEvent() {
        RemoveComponent(NodeSystemComponentsLookup.NodeEvent);
        return this;
    }
}

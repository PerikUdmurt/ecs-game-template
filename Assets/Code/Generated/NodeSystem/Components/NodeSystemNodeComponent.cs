//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeSystemMatcher {

    static Entitas.IMatcher<NodeSystemEntity> _matcherNode;

    public static Entitas.IMatcher<NodeSystemEntity> Node {
        get {
            if (_matcherNode == null) {
                var matcher = (Entitas.Matcher<NodeSystemEntity>)Entitas.Matcher<NodeSystemEntity>.AllOf(NodeSystemComponentsLookup.Node);
                matcher.componentNames = NodeSystemComponentsLookup.componentNames;
                _matcherNode = matcher;
            }

            return _matcherNode;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeSystemEntity {

    public NodeBasedSystem.Nodes.Node node { get { return (NodeBasedSystem.Nodes.Node)GetComponent(NodeSystemComponentsLookup.Node); } }
    public NodeBasedSystem.Nodes.ENodeType Node { get { return node.Value; } }
    public bool hasNode { get { return HasComponent(NodeSystemComponentsLookup.Node); } }

    public NodeSystemEntity AddNode(NodeBasedSystem.Nodes.ENodeType newValue) {
        var index = NodeSystemComponentsLookup.Node;
        var component = (NodeBasedSystem.Nodes.Node)CreateComponent(index, typeof(NodeBasedSystem.Nodes.Node));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public NodeSystemEntity ReplaceNode(NodeBasedSystem.Nodes.ENodeType newValue) {
        var index = NodeSystemComponentsLookup.Node;
        var component = (NodeBasedSystem.Nodes.Node)CreateComponent(index, typeof(NodeBasedSystem.Nodes.Node));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public NodeSystemEntity RemoveNode() {
        RemoveComponent(NodeSystemComponentsLookup.Node);
        return this;
    }
}

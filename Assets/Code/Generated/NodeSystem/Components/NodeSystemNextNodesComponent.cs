//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeSystemMatcher {

    static Entitas.IMatcher<NodeSystemEntity> _matcherNextNodes;

    public static Entitas.IMatcher<NodeSystemEntity> NextNodes {
        get {
            if (_matcherNextNodes == null) {
                var matcher = (Entitas.Matcher<NodeSystemEntity>)Entitas.Matcher<NodeSystemEntity>.AllOf(NodeSystemComponentsLookup.NextNodes);
                matcher.componentNames = NodeSystemComponentsLookup.componentNames;
                _matcherNextNodes = matcher;
            }

            return _matcherNextNodes;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeSystemEntity {

    public NodeBasedSystem.Nodes.NextNodes nextNodes { get { return (NodeBasedSystem.Nodes.NextNodes)GetComponent(NodeSystemComponentsLookup.NextNodes); } }
    public System.Collections.Generic.List<Code.NodeBasedSystem.Core.Conditions.ConditionedNode> NextNodes { get { return nextNodes.Value; } }
    public bool hasNextNodes { get { return HasComponent(NodeSystemComponentsLookup.NextNodes); } }

    public NodeSystemEntity AddNextNodes(System.Collections.Generic.List<Code.NodeBasedSystem.Core.Conditions.ConditionedNode> newValue) {
        var index = NodeSystemComponentsLookup.NextNodes;
        var component = (NodeBasedSystem.Nodes.NextNodes)CreateComponent(index, typeof(NodeBasedSystem.Nodes.NextNodes));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public NodeSystemEntity ReplaceNextNodes(System.Collections.Generic.List<Code.NodeBasedSystem.Core.Conditions.ConditionedNode> newValue) {
        var index = NodeSystemComponentsLookup.NextNodes;
        var component = (NodeBasedSystem.Nodes.NextNodes)CreateComponent(index, typeof(NodeBasedSystem.Nodes.NextNodes));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public NodeSystemEntity RemoveNextNodes() {
        RemoveComponent(NodeSystemComponentsLookup.NextNodes);
        return this;
    }
}

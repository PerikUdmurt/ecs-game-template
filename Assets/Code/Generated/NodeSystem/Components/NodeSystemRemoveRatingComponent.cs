//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeSystemMatcher {

    static Entitas.IMatcher<NodeSystemEntity> _matcherRemoveRating;

    public static Entitas.IMatcher<NodeSystemEntity> RemoveRating {
        get {
            if (_matcherRemoveRating == null) {
                var matcher = (Entitas.Matcher<NodeSystemEntity>)Entitas.Matcher<NodeSystemEntity>.AllOf(NodeSystemComponentsLookup.RemoveRating);
                matcher.componentNames = NodeSystemComponentsLookup.componentNames;
                _matcherRemoveRating = matcher;
            }

            return _matcherRemoveRating;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeSystemEntity {

    public Code.NodeBasedSystem.ProgressNodeComponents.RemoveRatingComponent removeRating { get { return (Code.NodeBasedSystem.ProgressNodeComponents.RemoveRatingComponent)GetComponent(NodeSystemComponentsLookup.RemoveRating); } }
    public float RemoveRating { get { return removeRating.Value; } }
    public bool hasRemoveRating { get { return HasComponent(NodeSystemComponentsLookup.RemoveRating); } }

    public NodeSystemEntity AddRemoveRating(float newValue) {
        var index = NodeSystemComponentsLookup.RemoveRating;
        var component = (Code.NodeBasedSystem.ProgressNodeComponents.RemoveRatingComponent)CreateComponent(index, typeof(Code.NodeBasedSystem.ProgressNodeComponents.RemoveRatingComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public NodeSystemEntity ReplaceRemoveRating(float newValue) {
        var index = NodeSystemComponentsLookup.RemoveRating;
        var component = (Code.NodeBasedSystem.ProgressNodeComponents.RemoveRatingComponent)CreateComponent(index, typeof(Code.NodeBasedSystem.ProgressNodeComponents.RemoveRatingComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public NodeSystemEntity RemoveRemoveRating() {
        RemoveComponent(NodeSystemComponentsLookup.RemoveRating);
        return this;
    }
}

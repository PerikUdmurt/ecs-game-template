//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeSystemMatcher {

    static Entitas.IMatcher<NodeSystemEntity> _matcherNextNodeRequest;

    public static Entitas.IMatcher<NodeSystemEntity> NextNodeRequest {
        get {
            if (_matcherNextNodeRequest == null) {
                var matcher = (Entitas.Matcher<NodeSystemEntity>)Entitas.Matcher<NodeSystemEntity>.AllOf(NodeSystemComponentsLookup.NextNodeRequest);
                matcher.componentNames = NodeSystemComponentsLookup.componentNames;
                _matcherNextNodeRequest = matcher;
            }

            return _matcherNextNodeRequest;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeSystemEntity {

    static readonly Code.NodeBasedSystem.NextNodeRequestComponent nextNodeRequestComponent = new Code.NodeBasedSystem.NextNodeRequestComponent();

    public bool isNextNodeRequest {
        get { return HasComponent(NodeSystemComponentsLookup.NextNodeRequest); }
        set {
            if (value != isNextNodeRequest) {
                var index = NodeSystemComponentsLookup.NextNodeRequest;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : nextNodeRequestComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

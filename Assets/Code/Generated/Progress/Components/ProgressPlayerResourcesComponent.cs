//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ProgressMatcher {

    static Entitas.IMatcher<ProgressEntity> _matcherPlayerResources;

    public static Entitas.IMatcher<ProgressEntity> PlayerResources {
        get {
            if (_matcherPlayerResources == null) {
                var matcher = (Entitas.Matcher<ProgressEntity>)Entitas.Matcher<ProgressEntity>.AllOf(ProgressComponentsLookup.PlayerResources);
                matcher.componentNames = ProgressComponentsLookup.componentNames;
                _matcherPlayerResources = matcher;
            }

            return _matcherPlayerResources;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ProgressEntity {

    static readonly Code.Progress.PlayerStorage.PlayerResourcesComponent playerResourcesComponent = new Code.Progress.PlayerStorage.PlayerResourcesComponent();

    public bool isPlayerResources {
        get { return HasComponent(ProgressComponentsLookup.PlayerResources); }
        set {
            if (value != isPlayerResources) {
                var index = ProgressComponentsLookup.PlayerResources;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : playerResourcesComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

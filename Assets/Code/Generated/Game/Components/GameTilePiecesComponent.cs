//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTilePieces;

    public static Entitas.IMatcher<GameEntity> TilePieces {
        get {
            if (_matcherTilePieces == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TilePieces);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTilePieces = matcher;
            }

            return _matcherTilePieces;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Tiles.TilePieces tilePieces { get { return (Code.Gameplay.Features.Tiles.TilePieces)GetComponent(GameComponentsLookup.TilePieces); } }
    public bool hasTilePieces { get { return HasComponent(GameComponentsLookup.TilePieces); } }

    public GameEntity AddTilePieces(Code.Gameplay.Features.Tiles.Datas.TilePiecesData newValues) {
        var index = GameComponentsLookup.TilePieces;
        var component = (Code.Gameplay.Features.Tiles.TilePieces)CreateComponent(index, typeof(Code.Gameplay.Features.Tiles.TilePieces));
        component.Values = newValues;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTilePieces(Code.Gameplay.Features.Tiles.Datas.TilePiecesData newValues) {
        var index = GameComponentsLookup.TilePieces;
        var component = (Code.Gameplay.Features.Tiles.TilePieces)CreateComponent(index, typeof(Code.Gameplay.Features.Tiles.TilePieces));
        component.Values = newValues;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTilePieces() {
        RemoveComponent(GameComponentsLookup.TilePieces);
        return this;
    }
}

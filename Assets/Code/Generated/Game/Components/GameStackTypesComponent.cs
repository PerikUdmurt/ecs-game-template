//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherStackTypes;

    public static Entitas.IMatcher<GameEntity> StackTypes {
        get {
            if (_matcherStackTypes == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.StackTypes);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherStackTypes = matcher;
            }

            return _matcherStackTypes;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Stack.StackTypes stackTypes { get { return (Code.Gameplay.Features.Stack.StackTypes)GetComponent(GameComponentsLookup.StackTypes); } }
    public bool hasStackTypes { get { return HasComponent(GameComponentsLookup.StackTypes); } }

    public GameEntity AddStackTypes(System.Collections.Generic.List<Code.Gameplay.Features.Stack.EStackType> newAvailableTypes) {
        var index = GameComponentsLookup.StackTypes;
        var component = (Code.Gameplay.Features.Stack.StackTypes)CreateComponent(index, typeof(Code.Gameplay.Features.Stack.StackTypes));
        component.AvailableTypes = newAvailableTypes;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceStackTypes(System.Collections.Generic.List<Code.Gameplay.Features.Stack.EStackType> newAvailableTypes) {
        var index = GameComponentsLookup.StackTypes;
        var component = (Code.Gameplay.Features.Stack.StackTypes)CreateComponent(index, typeof(Code.Gameplay.Features.Stack.StackTypes));
        component.AvailableTypes = newAvailableTypes;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveStackTypes() {
        RemoveComponent(GameComponentsLookup.StackTypes);
        return this;
    }
}

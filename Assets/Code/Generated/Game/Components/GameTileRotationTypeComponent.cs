//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTileRotationType;

    public static Entitas.IMatcher<GameEntity> TileRotationType {
        get {
            if (_matcherTileRotationType == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TileRotationType);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTileRotationType = matcher;
            }

            return _matcherTileRotationType;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Tiles.TileRotationType tileRotationType { get { return (Code.Gameplay.Features.Tiles.TileRotationType)GetComponent(GameComponentsLookup.TileRotationType); } }
    public Code.Gameplay.Features.Tiles.Configs.ETileRotationType TileRotationType { get { return tileRotationType.Value; } }
    public bool hasTileRotationType { get { return HasComponent(GameComponentsLookup.TileRotationType); } }

    public GameEntity AddTileRotationType(Code.Gameplay.Features.Tiles.Configs.ETileRotationType newValue) {
        var index = GameComponentsLookup.TileRotationType;
        var component = (Code.Gameplay.Features.Tiles.TileRotationType)CreateComponent(index, typeof(Code.Gameplay.Features.Tiles.TileRotationType));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTileRotationType(Code.Gameplay.Features.Tiles.Configs.ETileRotationType newValue) {
        var index = GameComponentsLookup.TileRotationType;
        var component = (Code.Gameplay.Features.Tiles.TileRotationType)CreateComponent(index, typeof(Code.Gameplay.Features.Tiles.TileRotationType));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTileRotationType() {
        RemoveComponent(GameComponentsLookup.TileRotationType);
        return this;
    }
}

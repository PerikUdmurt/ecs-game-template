//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherStackedEntitiesIds;

    public static Entitas.IMatcher<GameEntity> StackedEntitiesIds {
        get {
            if (_matcherStackedEntitiesIds == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.StackedEntitiesIds);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherStackedEntitiesIds = matcher;
            }

            return _matcherStackedEntitiesIds;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Stack.StackedEntitiesIds stackedEntitiesIds { get { return (Code.Gameplay.Features.Stack.StackedEntitiesIds)GetComponent(GameComponentsLookup.StackedEntitiesIds); } }
    public bool hasStackedEntitiesIds { get { return HasComponent(GameComponentsLookup.StackedEntitiesIds); } }

    public GameEntity AddStackedEntitiesIds(System.Collections.Generic.List<int> newEntities) {
        var index = GameComponentsLookup.StackedEntitiesIds;
        var component = (Code.Gameplay.Features.Stack.StackedEntitiesIds)CreateComponent(index, typeof(Code.Gameplay.Features.Stack.StackedEntitiesIds));
        component.Entities = newEntities;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceStackedEntitiesIds(System.Collections.Generic.List<int> newEntities) {
        var index = GameComponentsLookup.StackedEntitiesIds;
        var component = (Code.Gameplay.Features.Stack.StackedEntitiesIds)CreateComponent(index, typeof(Code.Gameplay.Features.Stack.StackedEntitiesIds));
        component.Entities = newEntities;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveStackedEntitiesIds() {
        RemoveComponent(GameComponentsLookup.StackedEntitiesIds);
        return this;
    }
}

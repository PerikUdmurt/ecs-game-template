//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDragable;

    public static Entitas.IMatcher<GameEntity> Dragable {
        get {
            if (_matcherDragable == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Dragable);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDragable = matcher;
            }

            return _matcherDragable;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Dragable.DragableComponent dragable { get { return (Code.Gameplay.Features.Dragable.DragableComponent)GetComponent(GameComponentsLookup.Dragable); } }
    public bool Dragable { get { return dragable.Value; } }
    public bool hasDragable { get { return HasComponent(GameComponentsLookup.Dragable); } }

    public GameEntity AddDragable(bool newValue) {
        var index = GameComponentsLookup.Dragable;
        var component = (Code.Gameplay.Features.Dragable.DragableComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Dragable.DragableComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDragable(bool newValue) {
        var index = GameComponentsLookup.Dragable;
        var component = (Code.Gameplay.Features.Dragable.DragableComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Dragable.DragableComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDragable() {
        RemoveComponent(GameComponentsLookup.Dragable);
        return this;
    }
}

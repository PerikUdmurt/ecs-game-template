//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTilePosition;

    public static Entitas.IMatcher<GameEntity> TilePosition {
        get {
            if (_matcherTilePosition == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TilePosition);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTilePosition = matcher;
            }

            return _matcherTilePosition;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Tiles.TilePosition tilePosition { get { return (Code.Gameplay.Features.Tiles.TilePosition)GetComponent(GameComponentsLookup.TilePosition); } }
    public UnityEngine.Vector2Int TilePosition { get { return tilePosition.Value; } }
    public bool hasTilePosition { get { return HasComponent(GameComponentsLookup.TilePosition); } }

    public GameEntity AddTilePosition(UnityEngine.Vector2Int newValue) {
        var index = GameComponentsLookup.TilePosition;
        var component = (Code.Gameplay.Features.Tiles.TilePosition)CreateComponent(index, typeof(Code.Gameplay.Features.Tiles.TilePosition));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTilePosition(UnityEngine.Vector2Int newValue) {
        var index = GameComponentsLookup.TilePosition;
        var component = (Code.Gameplay.Features.Tiles.TilePosition)CreateComponent(index, typeof(Code.Gameplay.Features.Tiles.TilePosition));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTilePosition() {
        RemoveComponent(GameComponentsLookup.TilePosition);
        return this;
    }
}

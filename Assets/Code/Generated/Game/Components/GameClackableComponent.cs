//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherClackable;

    public static Entitas.IMatcher<GameEntity> Clackable {
        get {
            if (_matcherClackable == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Clackable);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherClackable = matcher;
            }

            return _matcherClackable;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Input.Mouse.Clickable.ClackableComponent clackable { get { return (Code.Gameplay.Input.Mouse.Clickable.ClackableComponent)GetComponent(GameComponentsLookup.Clackable); } }
    public bool Clackable { get { return clackable.Value; } }
    public bool hasClackable { get { return HasComponent(GameComponentsLookup.Clackable); } }

    public GameEntity AddClackable(bool newValue) {
        var index = GameComponentsLookup.Clackable;
        var component = (Code.Gameplay.Input.Mouse.Clickable.ClackableComponent)CreateComponent(index, typeof(Code.Gameplay.Input.Mouse.Clickable.ClackableComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceClackable(bool newValue) {
        var index = GameComponentsLookup.Clackable;
        var component = (Code.Gameplay.Input.Mouse.Clickable.ClackableComponent)CreateComponent(index, typeof(Code.Gameplay.Input.Mouse.Clickable.ClackableComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveClackable() {
        RemoveComponent(GameComponentsLookup.Clackable);
        return this;
    }
}
